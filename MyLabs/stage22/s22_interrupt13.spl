//This is the interrupt to implement the wait, signal , getpid and getppid system calls
//R14 , R15 , 
alias systemNum R14;
alias userSP R15;


//userSP-5 is the position that stores the system call number
userSP = SP;
systemNum = [([PTBR + 2 * ((userSP - 5) / 512) ] * 512 )  + ((userSP - 5) % 512)];

//this is to switch to the kernel stack
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16 + 13)] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16 + 11)] * 512 - 1;

//system call number of the semget is 17
if (systemNum == 17) then
    //change the mode flag of the process
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = systemNum;


    alias per_process R13;
    alias free_entry R12;
    alias counter R11;
    per_process = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1 ] * 16 + 11] * 512 + 512 - 16;
    counter = 0;
    free_entry = -1;
    while (counter < 8) do
        if ( [per_process] == -1 ) then
            free_entry = counter;
            break;
        endif;
        per_process = per_process + 2;         //per process is the address not the value itself
        counter = counter + 1;
    endwhile;

    //if the free entry is not found
    if (free_entry == -1) then
        [([PTBR + 2 * ((userSP - 1) / 512) ] * 512 )  + ((userSP - 1) % 512)] = -1;
        [PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE + 1] + 9] = 0;
        SP = userSP;
        ireturn;
    endif;

    [per_process] = 1;          //to indicate that the resource is semaphore
    
    multipush (R11, R12 , R13 , R14 , R15);
    R1 = 6;                  //acquire semaphore function number
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_2;
    multipop (R11 , R12 , R13 , R14 , R15);
    
    //if the return value is -1 then return -2
    if (R0 == -1) then 
        [([PTBR + 2 * ((userSP - 1) / 512) ] * 512 )  + ((userSP - 1) % 512)] = -2;
        [PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE + 1] + 9] = 0;
        SP = userSP;
        ireturn;
    endif;

    [per_process + 1] = R0;
    [([PTBR + 2 * ((userSP - 1) / 512) ] * 512 )  + ((userSP - 1) % 512)] = R0;
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1 ] * 16 + 9] = 0;

endif;

//system call number for sem_release is 18

if (systemNum == 18) then 
    //print ("semrelease");
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = systemNum;


    alias semID R12;
    semID = [([PTBR + 2 * ((userSP - 4) / 512) ] * 512 )  + ((userSP - 4) % 512)];

    alias per_process R13;
    per_process = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1 ] * 16 + 11] * 512 + 512 - 16;


    alias counter2 R10;
    counter2 = 0;
    while (counter2 < 8) do
        if ([per_process + counter2 * 2 + 1 ] == semID && [per_process + counter2 * 2] == 1) then
            break;
        endif;
        counter2 = counter2 + 1;
    endwhile;


    //checking if the semid is 0 or not
    if (semID < 0 || semID > 7 || [SEMAPHORE_TABLE + semID * 4 + 1 ] == 0 || counter2 >= 8) then  //last one is for process count
        [([PTBR + 2 * ((userSP - 1) / 512) ] * 512 )  + ((userSP - 1) % 512)] = -1;
        [PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE + 1] + 9] = 0;
        SP = userSP;
        ireturn;
    endif;

    multipush (R12 , R13 , R14, R15);
    R1 = 7;             //function number
    R2 = semID;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_0;
    multipop (R12 , R13 , R14 , R15);
    
    //invalidate the per process entry

    alias counter R11;
    counter = 0;

    while (counter < 8) do
        if ([per_process + 2 * counter + 1] == semID) then 
            [per_process + 2 * counter + 1] = -1;
            break;
        endif;
        counter = counter + 1;
    endwhile;

    //print ("release the sema"); 

    [([PTBR + 2 * ((userSP - 1) / 512) ] * 512 )  + ((userSP - 1) % 512)] = 0;
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1 ] * 16 + 9] = 0;

endif;


//this is after using all the system call
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;   //setting the mode flag
SP = userSP;
ireturn;