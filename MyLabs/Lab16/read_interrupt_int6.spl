//=================== READ INTERRUPT ====================

//print "read";
// set the MODE FLAG in the process table of the current process to the system call number which is 7 for read system call
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 7;

alias userSP R0;
userSP=SP;

// set UPTR to SP
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;

// Setting SP to (UArea Page number * 512 - 1) of the process
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;
physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4) % 512;
fileDescPhysicalAddr = (physicalPageNum * 512) + offset;
alias fileDescriptor R4;
fileDescriptor=[fileDescPhysicalAddr];

//print "fileDescriptor";
//print fileDescriptor;

if(fileDescriptor != -1) then
	alias physicalAddrRetVal R5;
	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = -1;

else 
	
	//print "else";

	multipush(R0, R1, R2, R3, R4, R5);
	//alias word R5;
	fileDescPhysicalAddr = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];

	//print "reading terminal";
	//==================== READING FROM TERMINAL ==================
	// pushing registers R0, R1, R2, R3 into the stack
	R1 = 4;		//R1
	R2 = [SYSTEM_STATUS_TABLE + 1];		//R2
	//R3 = word;		//R3

	call MOD_4;

	multipop(R0, R1, R2, R3, R4, R5);

	//=============================================================

	alias physicalAddrRetVal R6;
	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1)/ 512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = 0;

endif;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];

ireturn;