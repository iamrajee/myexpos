loadi(63,13);
loadi(64,14); // Load Library Code from disk to memory
loadi(65,7);
loadi(66,8); // Load the INIT program from the disk to the memory
loadi(22,35);
loadi(23,36); // Load the INT10 module from the disk to the memory.
loadi(2, 15);
loadi(3, 16); // Load the exception handler routine from the disk to the memory.
loadi(4, 17);
loadi(5, 18); // load the timer interrupt routine from disk blocks 17 and 18 to memory pages 4 and 5.

 PTBR = PAGE_TABLE_BASE;
PTLR = 10;
//Library

[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

SP = 8*512;

[76*512] = [65 * 512 + 1];

//Setting the process table for the init program (only user area page number and pid)
[PROCESS_TABLE + 1] = 0;
[PROCESS_TABLE + 11] = 80;


//Setting the current process number in the System Status Table
[SYSTEM_STATUS_TABLE + 1] = 0;

ireturn; 


