//loading the INIT program
loadi(65, 7);
loadi(66, 8);

//loading the idle program
loadi(69, 11);
loadi(70, 12);

//loading INT=10 routine
loadi(22, 35);
loadi(23, 36);

//loading INT=7 routine
loadi(16, 29);
loadi(17, 30);

//loading exception handler
loadi(2, 15);
loadi(3, 16);

//loading the timer interrupt handler
loadi(4, 17);
loadi(5, 18);

//loading the library
loadi(63, 13);
loadi(64, 14);


//Setting the Page Table for the IDLE program (here pid = 1)
PTBR = PAGE_TABLE_BASE;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

//Storing the IP in the top of the user stack and setting the SP
[81 * 512] = [69 * 512 + 1];



//Setting the Page Table for the INIT program (here pid = 1)
PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

//Storing the IP in the top of the user stack and setting the SP
[76 * 512] = [65 * 512 + 1];
SP = 8 * 512;


//Setting the process table for the IDLE program
[PROCESS_TABLE + 1] = 0;
[PROCESS_TABLE + 4] = CREATED;
[PROCESS_TABLE + 11] = 82;
[PROCESS_TABLE + 12] = 0;
[PROCESS_TABLE + 13] = 8 * 512;
[PROCESS_TABLE + 14] = PAGE_TABLE_BASE;
[PROCESS_TABLE + 15] = 10;

//Setting the process table for the init program
[PROCESS_TABLE + 17] = 1;
[PROCESS_TABLE + 20] = RUNNING;
[PROCESS_TABLE + 27] = 83;
[PROCESS_TABLE + 28] = 0;
[PROCESS_TABLE + 29] = 8 * 512;
[PROCESS_TABLE + 30] = PAGE_TABLE_BASE + 20;
[PROCESS_TABLE + 31] = 10;

//Setting the current process number in the System Status Table
[SYSTEM_STATUS_TABLE + 1] = 1;

ireturn;
