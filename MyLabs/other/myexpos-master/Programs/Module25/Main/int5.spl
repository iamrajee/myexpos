// int 4
// The system calls Open and Close

alias retVal R9;
alias syscall R5;
alias userSP R6;
alias pid R7;
alias processTable R8;

pid = [SYSTEM_STATUS_TABLE + 1];
userSP = SP;
processTable = PROCESS_TABLE + 16 * pid;
retVal = [PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512;

[processTable + 13] = SP;
SP = [processTable + 11] * 512 - 1;

// At the beginning of interrupt routine 5, extract the system call number from the user stack and switch to the kernel stack.
syscall = [[PTBR + 2 * ((userSP - 5) / 512)] * 512 + (userSP - 5) % 512];

// Open System Call
// Arguments: Filename (String)
// File Descriptor (Integer)	Success, the return value is the file descriptor for the opened file.
// -1	File not found or file is not a data or root file
// -2	System has reached its limit of open files
// -3	Process has reached its limit of resources
if (syscall == 2) then
	// Set the MODE_FLAG in the process table entry to 2, 
	[processTable + 9] = 2;

	alias iter R10;
	iter = 0;

	alias userPage R11;
	userPage = [processTable + 11];
	// Find a free Per-Process Resource Table entry. 
	while (iter < 8) do
		if ([userPage * 512 + RESOURCE_TABLE_OFFSET + 2 * iter] == -1) then
			break;
		endif; 
		iter = iter + 1;
	endwhile;

	// If there is no free entry, return -3.
	if (iter == 8) then
		[retVal] = -3;
		[processTable + 9] = 0;
		SP = [processTable + 13];
		ireturn;
	endif;

	alias filename R12;
	filename = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + (userSP - 4) % 512];

	// Call the open() function from the File Manager module to get the Open File table entry.
	multipush(R5, R6, R7, R8, R9, R10, R11, R12);
	R1 = 3;
	R2 = filename;
	call MOD_3;
	multipop(R5, R6, R7, R8, R9, R10, R11, R12);

	// If Open fails, return the error code.
	if (R0 < 0) then
		[retVal] = R0;
		[processTable + 9] = 0;
		SP = [processTable + 13];
		ireturn;
	endif;

	// Set the Per-Process Resource Table entry
	[userPage * 512 + RESOURCE_TABLE_OFFSET + 2 * iter] = FILE;
	[userPage * 512 + RESOURCE_TABLE_OFFSET + 2 * iter + 1] = R0;

	[retVal] = iter;
endif;

// Close System Call
// Arguments: File Descriptor (Integer)
// 0	Success
// -1	File Descriptor given is invalid
if (syscall == 3) then
	// Set the MODE_FLAG in the process table entry to 3, 
	[processTable + 9] = 3;
	
	alias fileDesc R10;
	fileDesc = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + (userSP - 4) % 512];

	// 	If file descriptor is invalid, return -1.    /* File descriptor value should be within the range 0 to 7 (both included). */
	if (fileDesc < 0 || fileDesc > 7) then
		[retVal] = -1;
		[processTable + 9] = 0;
		SP = [processTable + 13];
		ireturn;
	endif;

	// Locate the Per-Process Resource Table of the current process. 
	alias userPage R11;
	userPage = [processTable + 11];

	// If the Resource identifier field of the Per Process Resource Table entry is invalid or does not indicate a FILE, return -1.   
    //                 /* No file is open with this file descriptor. */
	if ([userPage * 512 + RESOURCE_TABLE_OFFSET + 2 * fileDesc] != FILE) then
		[retVal] = -1;
		[processTable + 9] = 0;
		SP = [processTable + 13];
		ireturn;
	endif;

	// Get the index of the Open File Table entry from Per-Process Resource Table entry.
	alias fileIndex R12;
	fileIndex = [userPage * 512 + RESOURCE_TABLE_OFFSET + 2 * fileDesc + 1];

	// Call the close() function in the File Manager module with the Open File Table index as arguement.
	multipush(R5, R6, R7, R8, R9, R10, R11, R12);
	R1 = 4;
	R2 = fileIndex;
	call MOD_3;
	multipop(R5, R6, R7, R8, R9, R10, R11, R12);

	// Invalidate the Per-Process Resource Table entry.
	[userPage * 512 + RESOURCE_TABLE_OFFSET + 2 * fileDesc] = -1;
	[retVal] = 0;

endif;

[processTable + 9] = 0;
SP = [processTable + 13];

ireturn;
