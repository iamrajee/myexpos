// =============TIMER INTERRUPT==================
// set UPTR to SP
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;

// Setting SP to (UArea Page number * 512 - 1) of the process
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

// back up register context
backup;

// find pid of current process
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE + 1];

// compute process table entry of current running process
alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;
[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;
[process_table_entry + 4 ] = READY;

// toggle the process (scheduling)
alias newPID R2;
if(currentPID == 0) then
	newPID = 1;
else
	newPID = 0;
endif;

// find process table entry of new process 
alias new_process_entry  R3;
new_process_entry  = PROCESS_TABLE + (newPID * 16);

// restore the SP, PTBR and PTLR values from the Process Table entry for the new process
SP = [new_process_entry + 11]*512 + [new_process_entry + 12];
PTBR = [new_process_entry + 14];
PTLR = [new_process_entry + 15];

// Set the PID field of the System Status Table as newPID
[SYSTEM_STATUS_TABLE + 1] = newPID;

// if the process is CREATED and never run before
if([new_process_entry  + 4] == CREATED) then
	[new_process_entry  + 4] = RUNNING;
	SP = [new_process_entry  + 13];
	ireturn;
endif;

// Set the state of the newly found process as RUNNING
[new_process_entry + 4] = RUNNING;

// restore register context
restore;

// set SP to the top of user stack
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]* 16) + 13];

//return back to user mode from kernel mode
ireturn;