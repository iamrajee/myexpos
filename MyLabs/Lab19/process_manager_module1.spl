//=================== MODULE 1 ====================
//print "process";
alias functionNum R1;
alias currentPID R2;

// Free User Area Page
if(functionNum == 2) then

	// obtain the user area page number from the process table entry
	alias user_area_page_num R3; 
	user_area_page_num = [(PROCESS_TABLE + 16*currentPID) + 11];

	// invoking the Release Page function to release user area page
	multipush(R1, R2, R3);

	functionNum = 2;
	R2 = user_area_page_num;
	call MOD_2;

	multipop(R1, R2, R3);

// Exit Process
else if(functionNum == 3) then

	// Invoking the Free Page Table function
	multipush(R1, R2, R3);
	functionNum = 4;
	call MOD_1;
	multipop(R1, R2, R3);

	// Invoking the Free user Area Page function
	multipush(R1, R2, R3);
	functionNum = 2;
	call MOD_1;
	multipop(R1, R2, R3);

	// set the state of the process as TERMINATED and return to the caller
	[(PROCESS_TABLE + 16*currentPID) + 4] = TERMINATED;

// Free Page Table	
else if(functionNum == 4) then

	alias ptbr R4;
	alias i R5;
	ptbr = [(PROCESS_TABLE + 16*currentPID) + 14];
	
	// invalidate the page table entries for the library pages
	[ptbr+0] = -1;
	[ptbr+1] = "0000";
	[ptbr+2] = -1;
	[ptbr+3] = "0000";

	i = 4;

	// For each valid entry in the page table, release the page by invoking the Release Page function and
	// invalidate the entry
	while(i < 20) do
		
		if([ptbr + i] != -1) then
			// invoking the Release Page function
			multipush(R1, R2, R3, R4, R5);
			functionNum = 2;
			R2 = [ptbr + i];
			call MOD_2;
			multipop(R1, R2, R3, R4, R5);
			[ptbr + i] = -1;
		endif;

		[ptbr + (i+1)] = "0000";
		i = i + 2;

	endwhile;

	alias disk_map_entry R6;
	alias j R7;
	i = 0;

	disk_map_entry = DISK_MAP_TABLE + (currentPID*10);
	j = 0;
	while(j <= 9) do
		if((((j >= 2) && (j <= 3)) || ((j >= 8) && (j <= 9))) && [disk_map_entry + j] != -1) then
			// invoking the Release block function
			multipush(R1, R2, R3, R4, R5, R6, R7);
			functionNum = 4;
			R2 = [disk_map_entry + j];
			call MOD_2;
			multipop(R1, R2, R3, R4, R5, R6, R7);
		endif;
		[disk_map_entry + j] = -1;
		j = j + 1;
	endwhile;

endif;
endif;
endif;

return;