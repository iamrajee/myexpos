//================ Disk Interrupt handler =======================

// switch to the kernel stack and back up the register context
[(PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

backup;

// set the STATUS field in the Disk Status table to 0 indicating that disk is no longer busy. 
[DISK_STATUS_TABLE] = 0;

// Go through all the process table entries, and change the state of the process to READY, 
// which is in WAIT_DISK state
alias counter R1;
counter = 0;
while(counter < MAX_PROC_NUM) do
	if([(PROCESS_TABLE + 16*counter) + 4] == WAIT_DISK) then
		[(PROCESS_TABLE + 16*counter) + 4] = READY;
	endif;
	counter = counter + 1;
endwhile;

restore;

SP = [(PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
ireturn;